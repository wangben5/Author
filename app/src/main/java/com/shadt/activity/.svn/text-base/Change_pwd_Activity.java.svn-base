package com.shadt.activity;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.Editable;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.shadt.bean.UpdateInfo;
import com.shadt.bean.UserBean;
import com.shadt.news.R;
import com.shadt.util.Contacts;
import com.shadt.util.Get_Sign;
import com.shadt.util.PasswordTextWatcher;
import com.shadt.util.RegularUtils;
import com.shadt.util.XMLParserUtil;

public class Change_pwd_Activity extends BaseActivity implements
		OnClickListener {
	LinearLayout back;
	TextView title;
	Context mcontext = Change_pwd_Activity.this;
	EditText old_pwd, new_pwd, qr_pwd;
	RelativeLayout ok;
	SharedPreferences preferences;
	String password = null, phone = null, img = null, id = null;
	protected UpdateInfo update;
	int lerbie_type = 0;
	public final int INT_HIDE_DIALOG = 101;
	public final int INT_HIDE_DIALOG_CONTEXT = 1011; // 内容数据获取 赋值
	public final int INT_SHOW_DIALOG = 100;
	public final int INT_ERROR_TIME = 404;// 超时
	public final int INT_FIRST_SUBMIT = 1; // 第一次接口请求
	public final int INT_SECOND_SUBMIT = 2; // 第二个
	public final int INT_GET_INFO = 11; // 得到顶部数据 设置adpter
	public final int INT_CONTENT_NULL = 403;// 数据为空

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_changepwd);
		password = get_sharePreferences_paw();
		builder.setPositiveButton("确定", new AlertDialog.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				dialog.dismiss();
			}
		});
		init();
	}

	Handler handler = new Handler() {

		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case INT_SHOW_DIALOG:
				showdialog();
				break;
			case INT_HIDE_DIALOG:
				hidedialogs();
				break;
			case INT_FIRST_SUBMIT:
				new Thread(networkTask2).start();
				break;
			case INT_ERROR_TIME:
				hidedialogs();
				builder.setMessage(result_string);
				builder.create().show();
				break;
			}
		};
	};

	public void init() {
		back = (LinearLayout) findViewById(R.id.line_back);
		title = (TextView) findViewById(R.id.title);
		old_pwd = (EditText) findViewById(R.id.old_pwd);
		new_pwd = (EditText) findViewById(R.id.new_pwd);
		qr_pwd = (EditText) findViewById(R.id.qr_pwd);
		ok = (RelativeLayout) findViewById(R.id.ok);
		ok.setOnClickListener(this);
		title.setText("修改密码");
		back.setOnClickListener(this);
		old_pwd.addTextChangedListener(new PasswordTextWatcher(old_pwd) {
			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#afterTextChanged(android.text.Editable)
			 */
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				super.afterTextChanged(s);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#beforeTextChanged(java.lang.CharSequence,
			 * int, int, int)
			 */
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub
				super.beforeTextChanged(s, start, count, after);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#onTextChanged(java.lang.CharSequence, int,
			 * int, int)
			 */
			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				super.onTextChanged(s, start, before, count);
			}
		});
		new_pwd.addTextChangedListener(new PasswordTextWatcher(new_pwd) {
			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#afterTextChanged(android.text.Editable)
			 */
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				super.afterTextChanged(s);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#beforeTextChanged(java.lang.CharSequence,
			 * int, int, int)
			 */
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub
				super.beforeTextChanged(s, start, count, after);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#onTextChanged(java.lang.CharSequence, int,
			 * int, int)
			 */
			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				super.onTextChanged(s, start, before, count);
			}
		});
		qr_pwd.addTextChangedListener(new PasswordTextWatcher(qr_pwd) {
			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#afterTextChanged(android.text.Editable)
			 */
			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				super.afterTextChanged(s);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#beforeTextChanged(java.lang.CharSequence,
			 * int, int, int)
			 */
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub
				super.beforeTextChanged(s, start, count, after);
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see com. .yanbb.testandroid.
			 * PasswordTextWatcher#onTextChanged(java.lang.CharSequence, int,
			 * int, int)
			 */
			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				super.onTextChanged(s, start, before, count);
			}
		});
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.line_back:
			finish();

			break;
		case R.id.ok:
			if (old_pwd.getText().toString().equals("")
					|| old_pwd.getText().toString().length() == 0) {
				builder.setMessage("旧密码不能为空");
				builder.create().show();
			} else if (new_pwd.getText().toString().equals("")
					|| new_pwd.getText().toString().length() == 0) {
				builder.setMessage("新密码不能为空");
				builder.create().show();
			} else if (new_pwd.getText().toString().length() < 8) {
				builder.setMessage("密码长度至少8位");
				builder.create().show();
			} else if (RegularUtils.isAlpha(new_pwd.getText().toString()) == true) {
				builder.setMessage("密码不能纯字母");
				builder.create().show();
			} else if (RegularUtils.isNumeric(new_pwd.getText().toString()) == true) {
				builder.setMessage("密码不能纯数字");
				builder.create().show();
			} else if (RegularUtils.havefuhao(new_pwd.getText().toString()) == false) {
				builder.setMessage("密码不能纯符号");
				builder.create().show();
			} else if (qr_pwd.getText().toString().equals("")
					|| qr_pwd.getText().toString().length() == 0) {
				builder.setMessage("确认密码不能为空");
				builder.create().show();
			} else if (!qr_pwd.getText().toString()
					.equals(new_pwd.getText().toString())) {
				builder.setMessage("两次填写的密码不一样");
				builder.create().show();
			} else if (!password.equals(old_pwd.getText().toString())) {
				builder.setMessage("旧密码错误,请重新填写");
				old_pwd.setText(null);
				builder.create().show();
			} else if (password.equals(qr_pwd.getText().toString())) {
				builder.setMessage("修改密码不能为旧密码");
				builder.create().show();
			} else {
				handler.sendEmptyMessage(INT_SHOW_DIALOG);
				handler.sendEmptyMessageDelayed(INT_FIRST_SUBMIT, 1000);
			}
			break;
		default:
			break;
		}
	}

	Runnable networkTask2 = new Runnable() {

		@Override
		public void run() {
			// TODO
			// 在这里进行 http request.网络请求相关操作
			Looper.prepare();
			try {
				xml(password, qr_pwd.getText().toString());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			Looper.loop();
		}
	};
	String result_string = "";

	public void xml(String oldpass, String newpass) throws IOException {

		String resultCode = null;
		List<NameValuePair> signParams = new LinkedList<NameValuePair>();
		signParams.add(new BasicNameValuePair("oldpassword", oldpass));
		signParams.add(new BasicNameValuePair("newpassword", newpass));
		signParams.add(new BasicNameValuePair("username",
				get_sharePreferences_name()));
		String sign = Get_Sign.genAppSign(signParams,
				get_sharePreferences_token());
		// TODO Auto-generated method stub
		// 组建xml数据
		StringBuilder xml = new StringBuilder();

		xml.append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
		xml.append("<xml>");
		xml.append("<username>" + get_sharePreferences_name() + "</username>");
		xml.append("<oldpassword>" + oldpass + "</oldpassword>");
		xml.append("<newpassword>" + newpass + "</newpassword>");
		xml.append("<sign>" + sign + "</sign>");
		xml.append("</xml>");

		Log.v("ceshi", "xml:" + xml.toString());

		// 实例化一个默认的Http客户端
		DefaultHttpClient client = new DefaultHttpClient();
		client.getParams().setIntParameter(
				CoreConnectionPNames.CONNECTION_TIMEOUT, 10000);

		HttpPost httpPost = new HttpPost(get_sharePreferences_fuwuqi()
				+ Contacts.CHANGE_PWD);
		StringEntity entity = new StringEntity(xml.toString());
		httpPost.setEntity(entity);
		HttpResponse httpResponse = client.execute(httpPost);

		if (httpResponse.getStatusLine().getStatusCode() == 200) {
			// 通过HttpEntity获得响应流
			InputStream is = httpResponse.getEntity().getContent();
			// 将流转换成string
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			byte[] buf = new byte[1024];
			int len;
			while ((len = is.read(buf)) != -1) {
				out.write(buf, 0, len);
			}
			String string = out.toString("UTF-8");
			Log.v("ceshi", "result:" + string);
			is = new ByteArrayInputStream(string.getBytes("UTF-8"));
			UserBean bean = new UserBean();
			try {
				bean = XMLParserUtil.parse(is);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Log.v("ceshi", "result" + bean.getRetrun_msg());
			// 登陆成功
			if (bean.getRetrun_code().equals("true")) { // true 是正确 false失败
				handler.sendEmptyMessage(INT_HIDE_DIALOG);
				Toast.makeText(mcontext, "修改成功", 0).show();
				Intent it = new Intent(this, LoginActivity.class);
				startActivity(it);
				finish();
			} else {
				result_string = bean.getRetrun_msg();
				handler.sendEmptyMessage(INT_HIDE_DIALOG_CONTEXT);
			}
		} else {
			result_string = "操作失败";
			handler.sendEmptyMessage(INT_HIDE_DIALOG_CONTEXT);
		}
	}

	@Override
	public void initPages() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onClickListener(View v) {
		// TODO Auto-generated method stub

	}

}
