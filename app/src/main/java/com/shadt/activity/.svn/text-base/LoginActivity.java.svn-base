package com.shadt.activity;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.provider.ContactsContract;
import android.text.Editable;
import android.text.TextUtils;
import android.util.Log;
import android.view.ContextThemeWrapper;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.shadt.bean.UpdateInfo;
import com.shadt.bean.UserBean;
import com.shadt.news.R;
import com.shadt.util.Contacts;
import com.shadt.util.OtherFinals;
import com.shadt.util.PasswordTextWatcher;
import com.shadt.util.XMLParserUtil;

/**
 * A login screen that offers login via email/password.
 */
public class LoginActivity extends BaseActivity {

	/**
	 * Id to identity READ_CONTACTS permission request.
	 */
	private static final int REQUEST_READ_CONTACTS = 0;
	private static final int REQUEST_TIMEOUT = 10 * 1000;// 设置请求超时10秒钟
	private static final int SO_TIMEOUT = 10 * 1000; // 设置等待数据超时时间10秒钟

	/**
	 * A dummy authentication store containing known user names and passwords.
	 * TODO: remove after connecting to a real authentication system.
	 */
	private static final String[] DUMMY_CREDENTIALS = new String[] {
			"foo@example.com:hello", "bar@example.com:world" };
	/**
	 * Keep track of the login task to ensure we can cancel it if requested.
	 */
	// <?xml version="1.0" encoding="UTF-8"?>
	// <xml><return_code>true</return_code>
	// <return_msg>登录成功!</return_msg>
	// <data>
	// <token>911ae34d-72a5-4305-a45e-256538825e01</token>
	// <username>admi</username>
	// <fullname>超级管理员</fullname>
	// </data>
	// </xml>
	// UI references.
	private AutoCompleteTextView mEmailView;
	private EditText mPasswordView;
	private View mLoginFormView;
	private Context mContext = LoginActivity.this;
	SharedPreferences preferences;
	Button mEmailSignInButton;
	LinearLayout line2;
	public static String initresult = ""; // 二维码扫描 返回的字符串 用来请求 获取 哪个地区的 标识
	public static boolean is_init = false; // 判断 是否 初始化 数据
	TextView txt1, txt2;
	private AlertDialog mAlertDialog;
	private TextView tip_msg;
	private boolean isSaveUserInfo;
	private LinearLayout layout_choosesave;
	private ImageView chooseImage;
	@SuppressLint("NewApi")
	public void init_dialog() {
		View view = View.inflate(getApplicationContext(), R.layout.prodialog,
				null);
		mAlertDialog = new AlertDialog.Builder(LoginActivity.this).create(); 
		mAlertDialog.setContentView(view);
		mAlertDialog.setCanceledOnTouchOutside(false);
		mAlertDialog.create();
		mAlertDialog.show();
		tip_msg = (TextView) view.findViewById(R.id.tips_loading_msg);
	}
	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);
		 preferences = getSharedPreferences("user",
				Context.MODE_PRIVATE);
		 
		isSaveUserInfo =  preferences.getBoolean("isSaveUserInfo", true);
		 
		Editor editor = preferences.edit();
		editor.putString("html_native", "");
		editor.putString("html_web", "");
		editor.commit();
		File dir = new File(OtherFinals.DIR_IMG);
		if (!dir.exists()) {// Launch camera to take photo for
			dir.mkdirs();// 创建照片的存储目录
		} else {
		}
		
		layout_choosesave = (LinearLayout) findViewById(R.id.layout_choosesave);
		chooseImage = (ImageView) findViewById(R.id.choose_save);
		
		// Set up the login form.
		mEmailView = (AutoCompleteTextView) findViewById(R.id.email);
		
		
		
		layout_choosesave.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(isSaveUserInfo){
					isSaveUserInfo = false ;
					chooseImage.setImageResource(R.drawable.chooseno);
					Editor editor = preferences.edit();
					editor.putBoolean("isSaveUserInfo", false);
					editor.apply();
				}else{
					isSaveUserInfo = true ;
					chooseImage.setImageResource(R.drawable.chooseyes);
					Editor editor = preferences.edit();
					editor.putBoolean("isSaveUserInfo", true);
					editor.apply();
				}
				
				
			}
		});
		
		if(isSaveUserInfo){
			chooseImage.setImageResource(R.drawable.chooseyes);
			
			mEmailView.setText("" + get_sharePreferences_name());
			mPasswordView = (EditText) findViewById(R.id.password);
			if(mEmailView.getText().toString().trim().equals("")){
				mPasswordView.setText("");
			}else{
				mPasswordView.setText("" + get_sharePreferences_paw());
			}
			
		}else{
			chooseImage.setImageResource(R.drawable.chooseno);
			
			mEmailView.setText("" + get_sharePreferences_name());
			mPasswordView = (EditText) findViewById(R.id.password);
			if(mEmailView.getText().toString().trim().equals("")){
				mPasswordView.setText("");
			}else{
				mPasswordView.setText("");
			}
			
			
		}
		
		
//		mPasswordView.addTextChangedListener(new PasswordTextWatcher(mPasswordView) {
//			
//			/*
//			 * (non-Javadoc)
//			 * 
//			 * @see com. .yanbb.testandroid.
//			 * PasswordTextWatcher#afterTextChanged(android.text.Editable)
//			 */
//			@Override
//			public void afterTextChanged(Editable s) {
//				// TODO Auto-generated method stub
//				super.afterTextChanged(s);
//			}
//
//			/*
//			 * (non-Javadoc)
//			 * 
//			 * @see com. .yanbb.testandroid.
//			 * PasswordTextWatcher#beforeTextChanged(java.lang.CharSequence,
//			 * int, int, int)
//			 */
//			@Override
//			public void beforeTextChanged(CharSequence s, int start, int count,
//					int after) {
//				// TODO Auto-generated method stub
//				super.beforeTextChanged(s, start, count, after);
//			}
//
//			/*
//			 * (non-Javadoc)
//			 * 
//			 * @see com. .yanbb.testandroid.
//			 * PasswordTextWatcher#onTextChanged(java.lang.CharSequence, int,
//			 * int, int)
//			 */
//			@Override
//			public void onTextChanged(CharSequence s, int start, int before,
//					int count) {
//				// TODO Auto-generated method stub
//				super.onTextChanged(s, start, before, count);
//			}
//		});
		mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);
		mEmailSignInButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {

				attemptLogin();
			}
		});

		mLoginFormView = findViewById(R.id.email_login_form);
		txt1 = (TextView) findViewById(R.id.text1);
		txt2 = (TextView) findViewById(R.id.text2);

		preferences = getSharedPreferences("user", Context.MODE_PRIVATE);

		line2 = (LinearLayout) findViewById(R.id.line2);

		line2.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent it = new Intent(mContext, CaptureActivity.class);
				startActivity(it);
			}
		});

	}

	/**
	 * Attempts to sign in or register the account specified by the login form.
	 * If there are form errors (invalid email, missing fields, etc.), the
	 * errors are presented and no actual login attempt is made.
	 */
	String email = null, password = null;

	private void attemptLogin() {
		// Reset errors.
		mEmailView.setError(null);
		mPasswordView.setError(null);

		// Store values at the time of the login attempt.
		email = mEmailView.getText().toString();
		password = mPasswordView.getText().toString();

		boolean cancel = false;
		View focusView = null;

		// Check for a valid password, if the user entered one.

		// Check for a valid email address.
		if (TextUtils.isEmpty(email)) {
			mEmailView.setError(getString(R.string.error_field_required));
			focusView = mEmailView;
			cancel = true;
			focusView.requestFocus();
			return;
		}
		if (TextUtils.isEmpty(password)) {
			mPasswordView.setError(getString(R.string.error_null_password));
			focusView = mPasswordView;
			cancel = true;
			focusView.requestFocus();
			return;
		}
		if (!isPasswordValid(password)) {
			mPasswordView.setError(getString(R.string.error_invalid_password));
			focusView = mPasswordView;
			cancel = true;
			focusView.requestFocus();
			return;
		}
		if (webutils.isNetworkConnected(mContext)) {

			handler.sendEmptyMessage(3);
			handler.sendEmptyMessageDelayed(1, 1000);
		} else {
			Toast.makeText(mContext, getResources().getText(R.string.erro_net),
					0).show();
		}

	}

	public boolean is_login_req = false;

	private boolean isPasswordValid(String password) {
		// TODO: Replace this with your own logic
		return password.length() >= 1;
	}

	public void setClickable(boolean able) {
		if (able == true) {
			mEmailSignInButton.setClickable(able);
			mEmailView.setFocusable(able);
			mEmailView.setFocusableInTouchMode(able);
			mPasswordView.setFocusable(able);
			mPasswordView.setFocusableInTouchMode(able);
		} else {
			mEmailSignInButton.setClickable(able);
			mEmailView.setFocusable(able);
			mEmailView.setFocusableInTouchMode(able);
			mPasswordView.setFocusable(able);
			mPasswordView.setFocusableInTouchMode(able);
		}
	}

	/**
	 * Shows the progress UI and hides the login form.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
	/**
	 * Shows the progress UI and hides the login form.
	 */
	private interface ProfileQuery {
		String[] PROJECTION = { ContactsContract.CommonDataKinds.Email.ADDRESS,
				ContactsContract.CommonDataKinds.Email.IS_PRIMARY, };

		int ADDRESS = 0;
		int IS_PRIMARY = 1;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {

		if (keyCode == KeyEvent.KEYCODE_BACK) {
			// 1235645488 - 0 > 3000
			finish();
		}
		return false;
	}

	/**
	 * Represents an asynchronous login/registration task used to authenticate
	 * the user.
	 */

	@Override
	public void initPages() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onClickListener(View v) {
		// TODO Auto-generated method stub

	}

	Runnable networkTask = new Runnable() {

		@Override
		public void run() {
			// TODO
			// 在这里进行 http request.网络请求相关操作
			Looper.prepare();
			try {
				if (TextUtils.isEmpty(get_sharePreferences_fuwuqi())) {
					handler.sendEmptyMessage(5);
				} else {
					xml(email, password);
				}

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Looper.loop();
		}

	};
	Runnable init_dia = new Runnable() {

		@Override
		public void run() {
			// TODO
			// 在这里进行 http request.网络请求相关操作
			Looper.prepare();
			init_dialog();
			Looper.loop();
		}

	};
	Runnable init_data_task = new Runnable() {

		@Override
		public void run() {
			// TODO
			// 在这里进行 http request.网络请求相关操作
			Looper.prepare();
			try {
				SubmitPost(initresult, Contacts.Init_data);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Looper.loop();
		}

	};
	Handler handler = new Handler() {

		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 1:
				if (get_sharePreferences_is_have_init().equals("1")) {
					new Thread(networkTask).start();
				} else {
					hidedialogs();
					Toast.makeText(mContext, "初始化数据错误，请进行扫描设置", 0).show();
				}
				break;
			case 0:
				hidedialogs();
				break;
			case 2:
				txt1.setText("" + get_sharePreferences_appname());
				txt2.setText("" + get_sharePreferences_tvname());
				break;
			case 3:
				showdialog();
				break;
			case 4:
				new Thread(init_data_task).start();
				break;
			case 5:
				Toast.makeText(mContext, "初始化数据错误，请进行扫描设置", 0).show();
				hidedialogs();
				break;
			case 6:
				Toast.makeText(mContext, "请求失败,请联系管理员", 0).show();
				break;
			}
		};
	};
	private UpdateInfo Init_data;

	public void xml(String name, String pass) throws IOException {
		try {

			String resultCode = null;

			// TODO Auto-generated method stub
			// 组建xml数据
			StringBuilder xml = new StringBuilder();

			xml.append("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
			xml.append("<xml>");
			xml.append("<username>" + name + "</username>");
			xml.append("<password>" + pass + "</password>");
			xml.append("</xml>");
			// 实例化一个默认的Http客户端
			DefaultHttpClient client = new DefaultHttpClient();
			client.getParams().setIntParameter(
					CoreConnectionPNames.CONNECTION_TIMEOUT, 10000);
			HttpPost httpPost = new HttpPost(get_sharePreferences_fuwuqi()
					+ Contacts.LOGIN);
			StringEntity entity = new StringEntity(xml.toString(), HTTP.UTF_8);
			httpPost.setEntity(entity);
			HttpResponse httpResponse = client.execute(httpPost);
			is_login_req = true;
			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				handler.sendEmptyMessage(0);
				// 通过HttpEntity获得响应流
				InputStream is = httpResponse.getEntity().getContent();
				// 将流转换成string
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				byte[] buf = new byte[1024];
				int len;
				while ((len = is.read(buf)) != -1) {
					out.write(buf, 0, len);
				}
				String string = out.toString("UTF-8");
				Log.v("ceshi", "result:" + string);
				is = new ByteArrayInputStream(string.getBytes("UTF-8"));
				UserBean bean = new UserBean();
				try {
					bean = XMLParserUtil.parse(is);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				// 登陆成功
				if (bean.getRetrun_code().equals("true")) { // true 是正确 false失败

					write_sharePreferences(name, pass, bean.getToken());
					Intent it = new Intent(this, MainActivity.class);
					it.putExtra("recordedit", bean.getRecordedit());
					it.putExtra("recordexamine", bean.getRecordaudit());
					startActivity(it);
					finish();
				} else {
					setClickable(true);
					Toast.makeText(mContext, bean.getRetrun_msg(), 0).show();
				}
			} else {
				setClickable(true);
				handler.sendEmptyMessage(0);
				handler.sendEmptyMessage(6);
			}
		} catch (Exception e) {
			// TODO: handle exception
			handler.sendEmptyMessage(0);
			handler.sendEmptyMessage(6);
		}
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		txt1.setText("" + get_sharePreferences_appname());
		txt2.setText("" + get_sharePreferences_tvname());
		if (is_init == true) {
			handler.sendEmptyMessage(3);
			is_init = false;
			handler.sendEmptyMessageDelayed(4, 1000);
		} else {
		}

	}

	public void SubmitPost(String string1, String url) throws IOException {
		HttpClient httpclient = new DefaultHttpClient();
		HttpPost httppost = new HttpPost(url);
		List<NameValuePair> formparams = new ArrayList<NameValuePair>();
		formparams.add(new BasicNameValuePair("vsInData0", string1));
		UrlEncodedFormEntity uefEntity;
		uefEntity = new UrlEncodedFormEntity(formparams, "UTF-8");
		httppost.setEntity(uefEntity);
		HttpResponse response = httpclient.execute(httppost);

		HttpEntity entity = response.getEntity();
		if (entity != null) {

			Init_data = new UpdateInfo();
			InputStream instreams = entity.getContent();

			String str = ConvertStreamToString(instreams);
			Log.v("ceshi", "result:aaa" + str);
			try {
				Init_data = XMLParserUtil.Parser_version(str);
				SharedPreferences preferences = getSharedPreferences("user",
						Context.MODE_PRIVATE);
				Editor editor = preferences.edit();
				// 获取失败
				handler.sendEmptyMessage(0);

				if (!Init_data.getVnResult().equals("0")) {
					Toast.makeText(mContext, "初始化数据失败，请联系管理员", 0).show();
					editor.putString("is_have", "0"); // 表示失败
				} else {

					// app name
					editor.putString("vsOutData0", Init_data.getVsOutData0());
					// 电视台
					editor.putString("vsOutData1", Init_data.getVsOutData1());
					// 服务器ip
					editor.putString("vsOutData2", Init_data.getVsOutData2());
					// 图片 宽度
					editor.putString("vsOutData3", Init_data.getVsOutData3());
					// 每次加载的条数
					editor.putString("vsOutData4", Init_data.getVsOutData4());
					editor.putString("vsOutData5", Init_data.getVsOutData5());
					editor.putString("is_have", "1"); // 表示ok

					editor.commit();
					handler.sendEmptyMessage(2);
				}

			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				handler.sendEmptyMessage(0);
			}
		} else {
			handler.sendEmptyMessage(0);
		}
	}

	public static String ConvertStreamToString(InputStream is) {

		BufferedReader reader = new BufferedReader(new InputStreamReader(is));

		StringBuilder sb = new StringBuilder();

		String line = null;

		try {

			while ((line = reader.readLine()) != null) {

				sb.append(line + "\n");

			}

		} catch (IOException e) {

			System.out.println("Error=" + e.toString());

		} finally {

			try {

				is.close();

			} catch (IOException e) {

				System.out.println("Error=" + e.toString());

			}

		}

		return sb.toString();

	}
}
